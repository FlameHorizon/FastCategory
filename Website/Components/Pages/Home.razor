@page "/"
@rendermode InteractiveServer

@using FastPayment.Core
@using Website.Models
@using MudBlazor.Extensions
@using System.ComponentModel.DataAnnotations


<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
  <DataAnnotationsValidator/>

  <MudDatePicker 
    Label="Date" 
    @bind-Date="_model.Date" 
    For="@(() => _model.Date)"
    @onkeydown="OnKeyDownDate"
    DateFormat="yyyy-MM-dd"
    ShowToolbar="false"
    autofocus/>

  <MudSelect 
    @bind-Value="_model.TransactionType" 
    Label="Transaction type"
    DateFormat="dd.MM.yyyy">
    @foreach (var opt in _options)
    {
      <MudSelectItem Value="opt">@opt</MudSelectItem>
    }
  </MudSelect>

  <MudSelect
    @bind-Value="_model.Payee"
    Label="Reciever">
    @foreach(var rec in _recievers)
    {
      <MudSelectItem Value="rec">@rec</MudSelectItem>
    }
  </MudSelect>

  <MudAutocomplete
    @bind-Value="_model.Categories"
    Label="Category"
    SearchFunc="Search"/>

  @* ##TODO: Remove up/down arrows at the end of the input *@
  <MudTextField
    @bind-Value="_model.TotalAmount"
    Label="Payment Value" />

  <MudButton 
    ButtonType="ButtonType.Submit"
    Variant="Variant.Filled"
    Color="Color.Primary"
    Class="ml-auto">
    Save
  </MudButton>
</EditForm>

<MudThemeProvider />
<MudPopoverProvider />

@code {
  // Model for the form.
  private readonly TransactionForm _model = new();

  private IEnumerable<string> _options = [
    "Deposit", 
    "Withdrawl", 
    "Transfer"
  ];

  private string[] _searchSpace = [ 
    "Jedzenie:Dom", 
    "Jedzenie:Miasto",
    "Jedzenie:Fast Food"
  ];

  private string[] _recievers = [
    "Rec1",
    "Rec2"
  ];

  private async Task<IEnumerable<string?>> Search(
    string phrase, 
    CancellationToken token)
  {
    // In real life use an asynchronous function for fetching data from an api.
    await Task.Delay( 5, token);

    if (string.IsNullOrEmpty(phrase))
    {
        return _searchSpace;
    }

    var engine = new CategorySearchEngine(_searchSpace);

    // ##TODO: Make sure search is case-insensitive.
    IEnumerable<string?> result = engine.Search(phrase);
    return result;
  }

  /// <summary>
  /// Handle key presses when the date input is focused.
  /// </summary>
  /// <param name="args">Information about which key was pressed.</param>
  private void OnKeyDownDate(KeyboardEventArgs args)
  {
    if (_model.Date == null)
    {
      _model.Date = DateTime.Today;
      return;
    }

    @* 
      @@FIXME: There is a bug when user presses CTRL + = or CTRL + - to zoom in or out 
      in the browser. The date changes as well. Find a way to prevent this.
    *@

    if (args.Key == "=")
    {
      _model.Date = _model.Date.Value.AddDays(1);
    }
    else if (args.Key == "-")
    {
      _model.Date = _model.Date.Value.AddDays(-1);
    }
  }

  private void OnValidSubmit()
  {
    Console.WriteLine("Form is valid");
    Console.WriteLine($"Date: {_model.Date}");
    Console.WriteLine($"Type: {_model.TransactionType}");
    Console.WriteLine($"Reciever: {_model.Payee}");
    Console.WriteLine($"Category: {_model.Categories}");
    Console.WriteLine($"Payment value: {_model.TotalAmount}");
  }
}
